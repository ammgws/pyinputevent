Metadata-Version: 1.0
Name: pyinputevent
Version: 0.1
Summary: UNKNOWN
Home-page: http://github.com/ammgws/pyinputevent
Author: UNKNOWN
Author-email: UNKNOWN
License: Copyright (c) Robert Thomson and individual contributors.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice, 
       this list of conditions and the following disclaimer.
    
    2. Redistributions in binary form must reproduce the above copyright 
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.

    3. Neither the name of Robert Thomson, nor the names of its
       contributors may be used to endorse or promote products derived from
       this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Description: Summary
        =======
        
        PyInputEvent provides a python interface to Linux's input subsystem
        using the `/dev/input/event*` devices, as well as providing a means
        to pass new events to the input subsystem using the `uinput` kernel
        module and `/dev/uinput`.
        
        Also included is the `keytrans` package to do translations of incoming
        events to new output events, by means of a config file and (possibly)
        python scripts.
        
        Included is a config file for the HAMA MCE Remote.
        
        How to use pyinputevent
        =======================
        
        In the `pyinputevent.py` file, the core classes are `InputEvent`
        and `SimpleDevice`.  `scancodes.py` contains all the relevant
        magic values, taken directly from `/usr/include/linux/input.h`
        
        `InputEvent` encapsulates a single `struct input_event`, and can
        `.pack` and `.unpack` values.  It can be instantiated with either
        a byte-buffer as the constructor argument or for a hand-crafted
        event with `InputEvent.new(etype, ecode, evalue)`
        
        SimpleDevice can be instantiated with the constructor arguments
        `device_name` and `device_path`. For example:
            
            sd = SimpleDevice("mouse", "/dev/input/event6")
            sd.read() # will perform a non-blocking read and return
                      # an input_event or None
        
        SimpleDevice implemented fileno(), which means that you can use
        the `select` module easily to determine when data has arrived.
        
        TODO: Document `Controller`, `HIDevice`, and `main()`
        
        How to use uinput
        =================
        
        TODO: For the moment see hamacontrol.py
        
        How to use keytrans
        ===================
        
        TODO: For the moment see hamacontrol.py
        
        How to use hamacontrol
        ======================
        
        `hamacontrol.py` combined pyinputevent, uinput, and keytrans together
        with a configuration file (`keymap.txt`) to provide support for
        the HAMA MCE Remote.  If the USB IR receiver is plugged in, running
        `python hamacontrol.py` will automatically detect the devices,
        listen for events on them, translate them based on the config file,
        then pass the translated events to a newly created `uinput` device.
        
        You may have to run `modprobe uinput` before running this script,
        and you either have to change the permissions on these devices, or
        run this script as root.
        
        X11 Device Detection
        ====================
        The original device should be ignored by X when you start hamacontrol.py
        because we now try to open it with the exclusive flag, which should stop X
        using it without any HAL or Xorg.conf hacks required.  If you still have
        problems, try including the following in your Xorg.conf file (with thanks
        to Graeme Blackman for this tidbit):
        
        ::
        
           Section "InputClass"
              Identifier "Hama Control"
              MatchProduct "9881"
              MatchVendor "05a4"
              Option "Ignore" "yes"
           EndSection 
        
        
        License
        =======
        Released under the MIT license.  See the `LICENSE` file.
        
Platform: UNKNOWN
